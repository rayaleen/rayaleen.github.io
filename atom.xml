<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ray's Home]]></title>
  <link href="http://rayaleen.github.io/atom.xml" rel="self"/>
  <link href="http://rayaleen.github.io/"/>
  <updated>2013-08-23T23:25:57+08:00</updated>
  <id>http://rayaleen.github.io/</id>
  <author>
    <name><![CDATA[Ray Chen]]></name>
    <email><![CDATA[rayaleen@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Apple HLS Study]]></title>
    <link href="http://rayaleen.github.io/blog/2013/08/23/apple-hls-study/"/>
    <updated>2013-08-23T23:19:00+08:00</updated>
    <id>http://rayaleen.github.io/blog/2013/08/23/apple-hls-study</id>
    <content type="html"><![CDATA[<p>最近因为工作需要了解Apple HLS(HTTP Live Streaming)的技术，看了很多文档资料，就把自己的一些理解写下来算作一个总结。</p>

<!--more-->


<blockquote></blockquote>

<h2>什么是HLS</h2>

<p>HLS是苹果公司提出一个可以在iOS, iPad或者QuickTime运行的一个HTTP流媒体解决方案。现在主流的网络视频软件，基本上都会提供VOD(video on demand)和live这两种播放方式，当然使用HLS也可以实现同样的功能。既然称作streaming,就应该有一些stream的特质，最主要的就是客户端不会一次获得视频源文件甚至下载地址，而且通过一系列的数据流不停的提供给客户端，从而实现完整的视频流的感觉。</p>

<h2>Stream如何实现</h2>

<p>HLS的stream是怎么样实现的呢？在这篇<a href="http://blog.nkbit.com/2011/11/http-live-streaming.html">blog</a>里面，作者用一个黄瓜切片的例子来解释HLS stream的原理。其实就是将一个视频文件通过一系列的工具，最后切成一片一片(slice)的视频文件(ts file)，然后把这些视频文件按照播放顺序放在m3u8的playlist里面，播放器看到这个m3u8的playlist就知道该去哪拿视频，按照什么顺序播放了。</p>

<h2>M3U8</h2>

<p>下面是一个VOD M3U8的例子</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#EXTM3U
</span><span class='line'>#EXT-X-PLAYLIST-TYPE:VOD    
</span><span class='line'>#EXT-X-TARGETDURATION:10  //最大duration是10s
</span><span class='line'>#EXT-X-VERSION:3
</span><span class='line'>#EXT-X-MEDIA-SEQUENCE:0
</span><span class='line'>#EXTINF:10.0,
</span><span class='line'>http://example.com/movie1/fileSequenceA.ts
</span><span class='line'>#EXTINF:10.0,
</span><span class='line'>http://example.com/movie1/fileSequenceB.ts
</span><span class='line'>#EXTINF:10.0,
</span><span class='line'>http://example.com/movie1/fileSequenceC.ts
</span><span class='line'>#EXTINF:9.0,
</span><span class='line'>http://example.com/movie1/fileSequenceD.ts
</span><span class='line'>#EXT-X-ENDLIST</span></code></pre></td></tr></table></div></figure>


<p>在上面的M3U8里面，很清晰的描述了playlist type是VOD(#EXT-X-PLAYLIST-TYPE)，playlist version是3(#EXT-X-VERSION)， 每个ts的duration是10s(#EXTINF:10.0)，我们可以知道每一个ts的地址(<a href="http://example.com/movie1/fileSequenceA.ts">http://example.com/movie1/fileSequenceA.ts</a>)，然后player就会用这个地址和顺序去播放视频。因为是VOD类型，所以最后加了#EXT-X-ENDLIST，如果没有这个tag，那就是live streaming，并且这个m3u8 playlist 将会是一个Sliding Window，里面ts的序列是不停增加和移除的，而且每变动一次，EXT-X-MEDIA-SEQUENCE这个tag也会相应的+1.关于更多tag的描述可以参考<a href="https://developer.apple.com/library/ios/technotes/tn2288/_index.html">Example Playlist Files for use with HTTP Live Streaming</a></p>

<h2>Adaptive Stream</h2>

<p>HLS还支持Adaptive Stream，就是说可以提供给用户不同bandwidth，resolution的stream,然后player会根据用户现在网络情况，用的是iPhone还是iPad来选择最合适的stream。
首先，server要首先提供一个basic variant playlist</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#EXTM3U
</span><span class='line'>#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=150000,RESOLUTION=416x234, \
</span><span class='line'>CODECS="avc1.42e00a,mp4a.40.2"
</span><span class='line'>http://example.com/low/index.m3u8
</span><span class='line'>#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=240000,RESOLUTION=416x234, \
</span><span class='line'>CODECS="avc1.42e00a,mp4a.40.2"
</span><span class='line'>http://example.com/lo_mid/index.m3u8
</span><span class='line'>#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=440000,RESOLUTION=416x234, \
</span><span class='line'>CODECS="avc1.42e00a,mp4a.40.2"
</span><span class='line'>http://example.com/hi_mid/index.m3u8
</span><span class='line'>#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=640000,RESOLUTION=640x360, \
</span><span class='line'>CODECS="avc1.42e00a,mp4a.40.2"
</span><span class='line'>http://example.com/high/index.m3u8
</span><span class='line'>#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=64000,CODECS="mp4a.40.5"
</span><span class='line'>http://example.com/audio/index.m3u8</span></code></pre></td></tr></table></div></figure>


<p>可以看到，这个M3U8里面包含了五种不同bandwidth和resolution视频源，当player读取这个M3U8之后，就会根据现在用户的bandwidth和device来确定用哪一个片源的index.M3U8,然后再去读一个新的M3U8就可以播放了。如果中间player发现用户的bandwidth升高或者降低，也会相应的调整片源来实现adaptive stream.</p>

<p>如果用html5的video tag也只能在safari上正常播放HLS，如果是Chrome或者是Firefox，就会彻底的死火更别说Adaptive Stream.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Trace a packet on iOS Device]]></title>
    <link href="http://rayaleen.github.io/blog/2013/08/19/how-to-trace-a-packet-on-ios-device/"/>
    <updated>2013-08-19T21:29:00+08:00</updated>
    <id>http://rayaleen.github.io/blog/2013/08/19/how-to-trace-a-packet-on-ios-device</id>
    <content type="html"><![CDATA[<p>When we develop iOS program with network requirement, sometimes we may need to capture packet to debug a network problem. Apple has provide a <a href="https://developer.apple.com/library/mac/qa/qa1176/_index.html#//apple_ref/doc/uid/DTS10001707-CH1-SECGETTINGSTARTEDWITHTCPDUMP">network share method and some hints</a> for packet trace. Beside this way, we can also use iOS device to capture packet.</p>

<h2>Jailbreak your iPhone(iPad) and install dependency</h2>

<ol>
<li>First we need to jailbreak ios device, this is compulsory.</li>
<li>Open cydia, search and install <a href="http://www.openssh.org/">openssh</a>. After openssh has been installed, now you can use ssh to connect your iphone if you are in the same sub-network. You can login ios device with root accout and the default password alpine</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh root@192.168.1.1</span></code></pre></td></tr></table></div></figure>


<p>If you have installed openssh, you&rsquo;d better to change the default password to protect your ios device </br>
<img class="center" src="http://rayaleen.github.io/images/packet_trace/ssh.png">
3. As ios system actually is a branch of unix(Darwin), we use unix command as usual. But now the system only provide basic command such like &lsquo;ls&rsquo;, so if we want to use tcpdump, we need to install it first. The easiest way to install command is to use apt-get. But as this is also inavailable, we can install apt-get command by cydia.
4. Seach apt in Cydia and install APT 6.0 transitional package. After installed, you can use apt-get command to install unix tool.
<img class="center" src="http://rayaleen.github.io/images/packet_trace/install-tcpdump.png"></p>

<h2>Start to capture packet</h2>

<p>Now, we can start to cpature packet on ios device. Before that we&rsquo;d better to check which network interface is used for send packet.
<img class="center" src="http://rayaleen.github.io/images/packet_trace/ifconfig.png"></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tcpdump -i en0 -s 0 -w /tmp/DumpFile.pcap //if no -s 0, when analyse by wireshark, it will reports "packet size limited during capture"</span></code></pre></td></tr></table></div></figure>


<p>After dump packet to a local file, we can use scp to transfer the file to local and analyse with wireshark.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github Pages + Octopress]]></title>
    <link href="http://rayaleen.github.io/blog/2013/08/18/github-pages-plus-octopress/"/>
    <updated>2013-08-18T20:21:00+08:00</updated>
    <id>http://rayaleen.github.io/blog/2013/08/18/github-pages-plus-octopress</id>
    <content type="html"><![CDATA[<p>发现现在很多git用户都开始使用<a href="http://pages.github.com/">github pages</a> + <a href="http://octopress.org/">octopress</a>来建立自己的blog。Octopress宣扬的是blogging framework for hacker,如果懂点shell commands和基本的git用法就可以使用。所以自己也打算尝试一下并且开启自己的blog。</p>

<!--more --->


<h2>Octopress Setup</h2>

<h3>Requirement</h3>

<ul>
<li>Install <a href="http://git-scm.com/downloads">Git</a>,强烈推荐使用<a href="http://brew.sh/">Homebrew</a>来安装git</li>
<li>Install Ruby 1.9.3 using <a href="https://rvm.io/">RVM</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ \curl -L https://get.rvm.io | bash -s stable  --ruby =1.9.3</span></code></pre></td></tr></table></div></figure>


<h3>Setup Octopress</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>$ cd octopress    # If you use RVM, You'll be asked if you trust the .rvmrc file (say yes).
</span><span class='line'>$ ruby --version  # Should report Ruby 1.9.3</span></code></pre></td></tr></table></div></figure>


<p>下面安装依赖文件和安装octopress</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem install bundler
</span><span class='line'>$ bundle install
</span><span class='line'>$ rake install</span></code></pre></td></tr></table></div></figure>


<h2>Deoploying to Github pages</h2>

<h3>Create github repository</h3>

<p>在你的github下面创建一个符合username.github.io. 创建好之后就可以在本地Octopress配置github了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>这个命令将会帮你创建以下几点:
1 .询问你的github pages的repositiory url，这里可以填ssh地址比如：git@github.com:username/username.github.io.git
2. 重新命名origin到octopress
3. 设置origin remote为自己的github pages的url
4. 从当前master branch切换到source
5. 根据repository来配置blog地址
6. 在_deploy下面建立master branch用作deployment
下面可以运行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake generate
</span><span class='line'>$ rake deploy</span></code></pre></td></tr></table></div></figure>


<p>这将会创建你的blog，copy到_deploy/下面，然后add,commit,push到master branch。几秒钟之后你就会在你的blog上看到你刚才更新的内容
也不要忘记把source下面的内容commit到github</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add .
</span><span class='line'>$ git commit -m 'commit message'
</span><span class='line'>$ git push origin source</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
